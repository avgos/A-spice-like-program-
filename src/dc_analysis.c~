#include <stdlib.h>
#include "dc_analysis.h"
#include "element_structs.h"
#include "node_to_int.h"
#include <string.h>
#include "util.h"
#include <stdio.h>
#include <math.h>

#define BICG_FPS 1e-14


int init_analysis(unsigned int _n, unsigned int m2){
	int i;
	if(_n == 0 && m2 == 0)
		return -1;
	vector_size = _n + m2;
	alpha_matrix_size = _n+m2;
	//n plh8ows kombwn xwris geiwsh
	alpha_matrix = malloc(sizeof(double)*(_n+m2)*(_n+m2));
	x_vector = malloc(sizeof(double)*(_n+m2));
	for(i=0;i<(vector_size);i++){
		x_vector[i] = 0.0;
	}

	b_vector = malloc(sizeof(double)*(_n+m2));
	z_vector = malloc(sizeof(double)*(_n+m2));
	r_vector = malloc(sizeof(double)*(_n+m2));
	p_vector = malloc(sizeof(double)*(_n+m2));
	q_vector = malloc(sizeof(double)*(_n+m2));
	n = _n;
	for(i=0;i<(_n+m2)*(_n+m2);i++) alpha_matrix[i] = 0.0;
	for(i=0;i<(_n+m2);i++){ x_vector[i] = b_vector[i] = z_vector[i] = p_vector[i] = r_vector[i] = q_vector[i] = 0.0;}
	return 1;
}

int mna_construction(){
	resistor * temp;
	temp = (resistor *)resistor_list;
	while(temp != NULL){
		//sanity check
		if(temp->positive_node == temp->negative_node){
			temp = temp->next;
			continue;
		}else if(temp->positive_node == 0 && temp->negative_node > 0){
			alpha_matrix[(temp->negative_node-1)*(n+m2)+temp->negative_node-1] += 1/(temp->value);
		}else if(temp->positive_node  > 0 && temp->negative_node == 0){
			alpha_matrix[(temp->positive_node-1)*(n+m2)+temp->positive_node-1] += 1/(temp->value);
		}else{
			alpha_matrix[(temp->negative_node-1)*(n+m2)+temp->negative_node-1] += 1/(temp->value);
			alpha_matrix[(temp->positive_node-1)*(n+m2)+temp->positive_node-1] += 1/(temp->value);
			alpha_matrix[(temp->positive_node-1)*(n+m2)+temp->negative_node-1] -= 1/(temp->value); 
			alpha_matrix[(temp->negative_node-1)*(n+m2)+temp->positive_node-1] -= 1/(temp->value); 
		}
		temp = temp->next;
	}

	current_source * temp2 = (current_source *)crnt_list;
	while(temp2 != NULL){
		//satiny check 2
		if(temp2->positive_node == temp2->negative_node){
			temp2 = temp2->next;
			continue;
		}else if(temp2->positive_node == 0){
			b_vector[temp2->negative_node-1] += temp2->value;
		}else if(temp2->negative_node == 0){
			b_vector[temp2->positive_node-1] -= temp2->value;
		}else{
			b_vector[temp2->negative_node-1] += temp2->value;
			b_vector[temp2->positive_node-1] -= temp2->value;
		}
		temp2 = temp2->next;
	}
	unsigned int b_vector_index = n; // n+1 - hope so
	voltage_source * temp3 = (voltage_source *)vltg_list;
	while(temp3 != NULL){
		//printf("NAME: %s %d\n",temp3->name , temp3->negative_node-1 );
		//printf("vlt:%lf nn:%d pn:%d\n", temp3->value, temp3->negative_node, temp3->positive_node);
		//sanity check
		if(temp3->positive_node == temp3->negative_node){
			temp3 = temp3->next;
			continue;
		}else if(temp3->negative_node == 0){
			printf("b_vector_index:%d \n", b_vector_index);
			printf("positive_node-1 : %d\n",temp3->positive_node-1 );
			b_vector[b_vector_index] += temp3->value;
			alpha_matrix[(temp3->positive_node-1)*(n+m2)+b_vector_index] += 1.0;
			alpha_matrix[(b_vector_index)*(n+m2)+temp3->positive_node-1] += 1.0;
		}else if(temp3->positive_node == 0){
			b_vector[b_vector_index] += temp->value;
			alpha_matrix[(temp3->negative_node-1)*(n+m2)+b_vector_index] -= 1.0;
			alpha_matrix[(b_vector_index)*(n+m2)+temp3->negative_node-1] -= 1.0;
		}else{
			b_vector[b_vector_index] += temp3->value;
			alpha_matrix[(temp3->positive_node-1)*(n+m2)+b_vector_index] += 1.0;
			alpha_matrix[(b_vector_index)*(n+m2)+temp3->positive_node-1] += 1.0;
			alpha_matrix[(temp3->negative_node-1)*(n+m2)+b_vector_index] -= 1.0;
			alpha_matrix[(b_vector_index)*(n+m2)+temp3->negative_node-1] -= 1.0;

		}
		temp3->b_vector_pos = b_vector_index;
		b_vector_index++;
		temp3 = temp3->next;
	}
	coil * temp4 = (coil *)coil_list;
	while(temp4 != NULL){
		if(temp4->positive_node == temp4->negative_node){
			temp4 = temp4->next;
			continue;
		}else if(temp4->negative_node == 0){
			alpha_matrix[(temp4->positive_node-1)*(n+m2)+b_vector_index] += 1.0;
			alpha_matrix[(b_vector_index)*(n+m2)+temp4->positive_node-1] += 1.0;
		}else if(temp4->positive_node == 0){
			alpha_matrix[(temp4->negative_node-1)*(n+m2)+b_vector_index] -= 1.0;
			alpha_matrix[(b_vector_index)*(n+m2)+temp4->negative_node-1] -= 1.0;
		}else {
			alpha_matrix[(temp4->positive_node-1)*(n+m2)+b_vector_index] += 1.0;
			alpha_matrix[(b_vector_index)*(n+m2)+temp4->positive_node-1] += 1.0;
			alpha_matrix[(temp4->negative_node-1)*(n+m2)+b_vector_index] -= 1.0;
			alpha_matrix[(b_vector_index)*(n+m2)+temp4->negative_node-1] -= 1.0;
		}
		b_vector_index++;
		temp4 = temp4->next;
	}
	return 1;
}



void printf_matrix(){
	int i,j;
	n = table_counter;	
	printf("m2: %d n: %d\n",m2,n);
	for(i=0;i<(n+m2);i++){
		for(j=0;j<(n+m2);j++){ 
			printf("%10lf ",alpha_matrix[i*(n+m2)+j]);		
		}
		printf(" | ");
		printf("%9lf  =", x_vector[i]);
		printf(" %9lf\n", b_vector[i]);
	}
}


gsl_permutation *  mna_solver(){
	char * filenames[] = {"LU_sol","cholesky_sol", "cg_sol", "bicg_sol"};
	gsl_vector *x = NULL;
	gsl_permutation * p ;
    double *x_data;
    unsigned int x_size;
	if(get_analysis_type() == 0){
    	int s;
		printf_matrix();
    	x = gsl_vector_alloc (alpha_matrix_size);
    	gsl_matrix_view m = gsl_matrix_view_array(alpha_matrix, alpha_matrix_size, alpha_matrix_size);
    	gsl_vector_view b = gsl_vector_view_array(b_vector, alpha_matrix_size);
    	p = gsl_permutation_alloc (alpha_matrix_size);
    	gsl_linalg_LU_decomp (&m.matrix, p, &s);
    	gsl_linalg_LU_solve (&m.matrix, p, &b.vector, x);
		x_data = x->data;
		x_size = x->size;
	}else if(get_analysis_type() == 1){
		//cholesky
	    gsl_matrix_view m2 = gsl_matrix_view_array(alpha_matrix, alpha_matrix_size, alpha_matrix_size);
	    gsl_vector_view b2 = gsl_vector_view_array(b_vector, alpha_matrix_size);
	    gsl_linalg_cholesky_decomp(&m2.matrix);
	    x = gsl_vector_alloc (alpha_matrix_size);
	    gsl_linalg_cholesky_solve(&m2.matrix, &b2.vector, x);
    	x_data = x->data;
    	x_size = x->size;
    }else if(get_analysis_type() == 2){
    	//cg
    	cg_iter_solver();
    	x_data = x_vector;
    	x_size = vector_size;
    }else if(get_analysis_type() == 3){
    	//bi cg
		bicg_iter_solver();
    	x_data = x_vector;
    	x_size = vector_size;
    }


	current_source * temp2 = (current_source *)crnt_list;
	// write output to file
	FILE *fp;
	fp = fopen(filenames[get_analysis_type()], "w+");
	if(fp){
		int i;	
		for(i=0;i<x_size;i++)
			if(get_nodename(i) == NULL){

				if(temp2 != NULL && temp2->name != NULL){
					fprintf(fp, "[I%s]: %g\n",temp2->name, x_data[i] );
					temp2 = temp2->next;
				}else{
					fprintf(fp, "[I]: %g\n",x_data[i] );
				}
			}else
				fprintf(fp, "[V%s]: %g\n",get_nodename(i), x_data[i] );
	}
	fclose(fp);
	if(x != NULL)
	gsl_vector_free(x);
	if(get_analysis_type() == 0)
		return p;
	else 
		return NULL;
}



void dc_sweep_analysis(gsl_permutation * p){
	char * filenames[] = {"LU_sol_nodes","cholesky_sol_nodes","CG_sol_nodes","BiCG_sol_nodes"};
	gsl_vector *x;
	gsl_matrix_view m2,m;
	//gsl_permutation * p;
	int i;	
	
	for(i=0;i<(vector_size);i++){
		x_vector[i] = 0.0;
	}
	
	//SPD matrices
	if(get_analysis_type() == 1){
	    //cholesky
	    m2 = gsl_matrix_view_array(alpha_matrix, alpha_matrix_size, alpha_matrix_size);
	    //gsl_linalg_cholesky_decomp(&m2.matrix);
	    x = gsl_vector_alloc (alpha_matrix_size);
	    
	}
	//General matrices
	else if (get_analysis_type() == 0){
    	//int s;
    	//	p = gsl_permutation_alloc (alpha_matrix_size);
    	x = gsl_vector_alloc (alpha_matrix_size);
    	m = gsl_matrix_view_array(alpha_matrix, alpha_matrix_size, alpha_matrix_size);
	
    	//gsl_linalg_LU_decomp (&m.matrix, p, &s);
 	}
	

				
    
	voltage_source * temp2;// = vltg_list;
    	dc_options * temp;
	temp = dc_option_list;
	int pos = -1;
	double voltage_step; 
	

	while(temp != NULL){
		temp2 = vltg_list;
		while(temp2 != NULL){
			if(strcmp(temp2->name,temp->node_name) == 0){
				pos = temp2->b_vector_pos; break;
			}
			temp2 = temp2->next;
		}
		if(pos == -1){
			temp = temp->next;
			continue;
		}
		double b_vector_pos_initial_value = b_vector[pos];
		b_vector[pos] -= temp2->value;
		double b_vector_temp = b_vector[pos];

		
		FILE *fp;
		plot_print * pptemp;


		fp = fopen(filenames[get_analysis_type()], "w+");
		fprintf(fp, "*********************************************************************\n" );
		fprintf(fp, "* %s from_voltage: %2.5f to_voltage:%2.5f step:%2.5f\n", temp->node_name,temp->from_voltage, 
			temp->to_voltage, temp->step);
		fprintf(fp, "* Watching Nodes: \n" );
		pptemp = plot_print_list;
		while(pptemp != NULL){

			if(pptemp->index != -1)
				fprintf(fp, "* %s\n", &pptemp->name[2] );
			pptemp = pptemp->next;
		}
		fprintf(fp, "*********************************************************************\n\n" );


		for(voltage_step = temp->from_voltage; voltage_step< temp->to_voltage; voltage_step += temp->step){

			b_vector[pos] = b_vector_temp + voltage_step;

			//SPD matrices
			if(get_analysis_type() == 1){
				gsl_vector_view b2 = gsl_vector_view_array(b_vector, alpha_matrix_size);
				gsl_linalg_cholesky_solve(&m2.matrix, &b2.vector, x);
			}
			else if (get_analysis_type() == 2){
				cg_iter_solver();
			}
			// General matrices
			else if (get_analysis_type() == 0){
				gsl_vector_view b = gsl_vector_view_array(b_vector, alpha_matrix_size);
				gsl_linalg_LU_solve (&m.matrix, p, &b.vector, x);

			}
			else if (get_analysis_type() == 3){
				printf("EDWWW 1\n");					
				bicg_iter_solver();
				printf("EDWWW 2\n");
			}
			printf("x %f %f %f\n", x->data[0],x->data[1],x->data[2]);
	
			if(fp){
				pptemp = plot_print_list;
				fprintf(fp, "cur_step: %2.5f\n", voltage_step );
				while(pptemp != NULL){
					if(pptemp->index != -1)
						fprintf(fp, "[%s]: %g - %d\n",&pptemp->name[2], x->data[pptemp->index-1], pptemp->index );
					pptemp = pptemp->next;
				}
				fprintf(fp, "\n" );
			}


		}

		fclose(fp);
		b_vector[pos] = b_vector_pos_initial_value;

		temp = temp->next;
	}


	if(get_analysis_type() ==0 ) 	    
		gsl_permutation_free (p);
	if(get_analysis_type() == 0 || get_analysis_type() == 1)
		gsl_vector_free(x);

}


void cg_iter_solver(void){
	
	int i,j;
	for(i=0;i<vector_size;i++)
		r_vector[i] = b_vector[i];
	unsigned int iter = 0;
	double * M;
	double norm, norm_b, norm_r;
		
	M = malloc(sizeof(double)*(vector_size));
	for(i=0;i<(vector_size);i++){
		M[i] = (alpha_matrix[(i*(vector_size))+i] == 0.0) ? 1.0 : alpha_matrix[(i*(vector_size))+i];
		norm_b += pow(b_vector[i],2);
	}
	
	norm_b = sqrt(norm_b);
	if (!norm_b)
		norm_b = 1;


	double rho,rho1,beta,alpha;
	while(iter < vector_size){
		iter += 1;
		for(i=0;i<vector_size;i++)
			z_vector[i] = r_vector[i] / M[i];
		
		rho = 0.0;
		for(i=0;i<vector_size;i++)
			rho += r_vector[i]*z_vector[i];

		if(iter == 1){
			for(i=0;i<vector_size;i++)
				p_vector[i] = z_vector[i];
		}else{
			beta = rho / rho1;
			for(i=0;i<vector_size;i++)
				p_vector[i] = z_vector[i] + beta*p_vector[i];
		}
		rho1 = rho;

		for(i=0;i<vector_size;i++){
			q_vector[i] = 0;
			for(j=0;j<vector_size;j++){
				q_vector[i] += alpha_matrix[i*(vector_size)+j]*p_vector[j];
			}
		}

		double temp = 0.0;
		for(i=0;i<vector_size;i++)
			temp += p_vector[i]*q_vector[i];
		alpha = rho / temp;
		norm_r = 0.0;
		for(i=0;i<vector_size;i++){
			x_vector[i] = x_vector[i] + alpha*p_vector[i]; 			
			//norm += fabs(r_vector[i]);
			r_vector[i] = r_vector[i] - alpha*q_vector[i];
			norm_r += pow(r_vector[i],2);
		}
		iter++;
		norm_r = sqrt(norm_r);
		norm = norm_r / norm_b;

		if(norm < itol) break;
		//printf("x_vector cg iter: %d norm: %f\n",iter, norm);
		//for(i=0;i<vector_size;i++){
		//	printf("%lf\n",x_vector[i]);
		//}
		//printf("-----------------------------------------------------------\n");
	}
	free(M);
}



void bicg_iter_solver(void) {


    double * r_vector_tilda = (double*)calloc(vector_size,sizeof(double));
    double * z_vector_tilda = (double*)malloc(vector_size*sizeof(double));
    double * p_vector_tilda = (double*)malloc(vector_size*sizeof(double));
	double * q_vector_tilda = (double*)malloc(vector_size*sizeof(double));
    double * M = (double*)malloc(vector_size*sizeof(double));

    //initial values:
    //                 _x[] = 0,...,0
    //                 _r = b

    double tol = 0.0001;
    int i = 0;
    for(i=0;i<vector_size;i++){
    	r_vector_tilda[i] = r_vector[i] = b_vector[i];
    	M[i] = (alpha_matrix[i*vector_size+i] != 0) ? alpha_matrix[i*vector_size+i] : 1.0;
    } 

    double temp = 0.0;
    for(i=0;i<vector_size;i++) temp += r_vector[i]*r_vector[i];
    double rho1 = temp; 
    temp = 0.0;
    for(i=0;i<vector_size;i++) temp += b_vector[i]*b_vector[i];
    double norm_b = sqrt(temp);
    if (norm_b == 0) norm_b = 1;


    const int max_iter = (vector_size > 20) ? vector_size : 20; 
    int iter = 0;
    while(iter<max_iter) {

    	for(i=0;i<vector_size;i++){
    		z_vector[i] = r_vector[i]/M[i];
    		z_vector_tilda[i] = r_vector_tilda[i]/M[i];
    	}
        double rho = 0; 
        for(i=0;i<vector_size;i++) rho += r_vector_tilda[i]*z_vector[i];
        double abs_rho = fabs(rho);
        if(abs_rho < BICG_FPS){
           	fprintf(stderr, "%s failed (abs(rho) < BICG_FPS) - bye bye now\n",__FUNCTION__);
	        exit(-1);
      	}
        if(iter == 0){
        	for(i=0;i<vector_size;i++){
        		p_vector[i] = z_vector[i];
        		p_vector_tilda[i] = z_vector_tilda[i];
        	}
        }else{
            double beta = rho/rho1;
            for(i=0;i<vector_size;i++){            	
            p_vector[i] =  z_vector[i] + beta*p_vector[i];
            p_vector_tilda[i] = z_vector_tilda[i] + beta*p_vector_tilda[i]; 
            }
        }
        rho1 = rho;
		int j;
		for(i=0;i<vector_size;i++){
			q_vector[i] = 0;
			for(j=0;j<vector_size;j++){
				q_vector[i] += alpha_matrix[i*(vector_size)+j]*p_vector[j];
			}
		}

		for(i=0; i<vector_size; ++i) {
        	double *col = &alpha_matrix[i];
        	q_vector_tilda[i] = 0.0; 
        	for(j=0;j<vector_size;j++){
				q_vector_tilda[i] += col[j*vector_size]*p_vector_tilda[j];
        	}
    	}

        double omega = 0.0;
        for(i=0;i<vector_size;i++) omega += p_vector_tilda[i] * q_vector[i];
        
        double abs_omega = fabs(rho);
        if(abs_omega < BICG_FPS){
			fprintf(stderr,"%s: failed (abs(omega) < BICG_FPS) - bye bye\n",__FUNCTION__);
			exit(-1);
		}
        double alpha = rho/omega;
        for(i=0;i<vector_size;i++){        	
	        x_vector[i]  = x_vector[i]  + alpha*p_vector[i]; 
    	    r_vector[i]  = r_vector[i]  - alpha*q_vector[i]; 
        	r_vector_tilda[i] = r_vector_tilda[i] - alpha*q_vector_tilda[i]; 
        }
        temp = 0.0;
        for(i=0;i<vector_size;i++) temp += r_vector[i] * r_vector[i];
        
        double cond = sqrt(temp)/norm_b;
        if (cond < tol) break;
        iter++;
    }

   // printf("bi_cg x_vector bitches\n");
	//for(i=0;i<vector_size;i++){
	//	printf("%lf\n",x_vector[i]);
	//}
	//printf("-----------------------------------------------------------\n");
		
	free(r_vector_tilda);
    free(z_vector_tilda);
    free(p_vector_tilda);
	free(q_vector_tilda);
    free(M); //I6


}
