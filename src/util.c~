#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "element_structs.h"
#include "node_to_int.h"


#define ALLOC_CHECK(a) if(a == NULL) { \
		fprintf(stderr, "[ERR] MALLOC FAILED FILE: %s FUNCTION: %s LINE: %d\n",__FILE__,__FUNCTION__,__LINE__ );\
       	exit(-1);\
    }

void init_lists(){
	resistor_list 	= NULL;
	capacitor_list 	= NULL;
	coil_list 		= NULL;
	vltg_list 		= NULL;
	crnt_list		= NULL;
	diode_list 		= NULL;
	tmos_list 		= NULL;
	tbjt_list 		= NULL;
	plot_print_list = NULL;
	dc_option_list  = NULL;
	m2 = 0;
	m1 = 0; 
	m  = 0;
	n  = 0; 
	analysis_type = 0;
}
void set_itol(double given_itol){
	itol=given_itol;
}

void set_analysis_type(int type){
	analysis_type = type;
}

char * get_analysis_type_text(void){
	char * names[] = {"LU","Cholesky","CG","BICG"};
	return names[analysis_type];
}

unsigned int get_analysis_type(void){
	return analysis_type;
}

plot_print * insert_plot_print(char *yytext){
	//pos == 0 -> .DC
	//pos >  0 -> val
	plot_print * temp;
	printf("[insert_plot_print] %s\n",yytext );
	temp = malloc(sizeof(plot_print));
	temp->name = strdup(yytext);
	temp->next = plot_print_list;
	plot_print_list = temp;
	return temp;
}

void fix_plot_print_list(void){
	plot_print * temp;
	temp = plot_print_list;
	while(temp != NULL){
		temp->name[strlen(temp->name)-1] = '\0';
		printf("EDW: |%s|->[%d]\n", &temp->name[2],get_key(&(temp->name[2])) );
		temp->index = get_key(&(temp->name[2]));
		temp = temp->next;
	}
}


dc_options * insert_dc_option_node(dc_options * head, char *stack[], int qlen){
	int i;
	for(i=0;i<qlen;i++){
		printf("DC_OPTION: %s\n",stack[i]);
	}
	if(qlen != 5){
		fprintf(stderr, "[ERR] FILE:%s FUNCTION: %s LINE: %d qlen(%d) != 4 insert_dc_option_node\n",__FILE__,__FUNCTION__,__LINE__,qlen);
		return NULL;
	}
	dc_options * temp = malloc(sizeof(dc_options));
	ALLOC_CHECK(temp)
	temp->node_name = strdup(stack[1]);  stack[1] = NULL;
	temp->from_voltage = atof(stack[2]); stack[2] = NULL;
	temp->to_voltage = atof(stack[3]);   stack[3] = NULL;
	temp->step = atof(stack[4]);  stack[4] = NULL;
	
	temp->next = head;
	return temp;
}


resistor * insert_resistor(resistor * head, char *stack[], int qlen){
	if(qlen != 4){
		fprintf(stderr, "[ERR] FILE:%s FUNCTION: %s LINE: %d qlen(%d) != 4\n",__FILE__,__FUNCTION__,__LINE__,qlen);
		return head;
	}
	m1++;
	resistor *temp = malloc(sizeof(resistor));
	ALLOC_CHECK(temp)
	temp->name = stack[0]; stack[0] = NULL;
	temp->positive_node = add_node(stack[1]); stack[1] = NULL;
	temp->negative_node = add_node(stack[2]); stack[2] = NULL;
	//printf("RESISTOR: qlen=%d key1=[%s/%d] key2=[%s/%d]\n",qlen,stack[1],add_node(stack[1]),stack[2],add_node(stack[2]) );
	temp->value = atof(stack[3]); stack[3] = NULL;
	temp->next = head;
	return temp;
}

capacitor * insert_capacitor(capacitor * head, char *stack[], int qlen){
	if(qlen != 4){
		fprintf(stderr, "[ERR] FILE:%s FUNCTION: %s LINE: %d qlen(%d) != 4\n",__FILE__,__FUNCTION__,__LINE__,qlen);
		return head;
	}
	m1++;
	capacitor *temp = malloc(sizeof(capacitor));
	ALLOC_CHECK(temp)
	temp->name = stack[0]; stack[0] = NULL;
	temp->positive_node = add_node(stack[1]); stack[1] = NULL;
	temp->negative_node = add_node(stack[2]); stack[2] = NULL;
	temp->value = atof(stack[3]); stack[3] = NULL;
	temp->next = head;
	return temp;
}

coil * insert_coil(coil * head, char *stack[], int qlen){
	if(qlen != 4){
		fprintf(stderr, "[ERR] FILE:%s FUNCTION: %s LINE: %d qlen(%d) != 4\n",__FILE__,__FUNCTION__,__LINE__,qlen);
		return head;
	}
	m2++;
	coil *temp = malloc(sizeof(coil));
	ALLOC_CHECK(temp)
	temp->name = stack[0]; stack[0] = NULL;
	temp->positive_node = add_node(stack[1]); stack[1] = NULL;
	temp->negative_node = add_node(stack[2]); stack[2] = NULL;
	temp->value = atof(stack[3]); stack[3] = NULL;
	temp->next = head;
	return temp;
}


diode * insert_diode(diode * head, char *stack[], int qlen){
	if(qlen != 5 && qlen != 4){
		fprintf(stderr, "[ERR] FILE:%s FUNCTION: %s LINE: %d qlen(%d) != 4\n",__FILE__,__FUNCTION__,__LINE__,qlen);
		return head;		
	}
	diode *temp = malloc(sizeof(diode));
	ALLOC_CHECK(temp)
	temp->name = stack[0]; stack[0] = NULL;
	temp->positive_node = add_node(stack[1]); stack[1] = NULL;
	temp->negative_node = add_node(stack[2]); stack[2] = NULL;
	temp->model_name = stack[3]; stack[3] = NULL;
	if(qlen == 5){
		temp->area = (stack[4][0] == '[') ? atof(&stack[4][1]) : atof(stack[4]); stack[4] = NULL;
	}
	temp->next = head;
	return temp;
}


transistor_bjt * insert_bjt(transistor_bjt * head, char * stack[], int qlen){
	if(qlen != 6 && qlen != 5){
		fprintf(stderr, "[ERR] FILE:%s FUNCTION: %s LINE: %d qlen(%d) != 4\n",__FILE__,__FUNCTION__,__LINE__,qlen);
		return head;		
	}
	transistor_bjt *temp = malloc(sizeof(transistor_bjt));
	ALLOC_CHECK(temp)
	temp->name = stack[0]; stack[0] = NULL;
	temp->c_node = add_node(stack[1]); stack[1] = NULL;
	temp->b_node = add_node(stack[2]); stack[2] = NULL;
	temp->e_node = add_node(stack[3]); stack[3] = NULL;
	temp->model_name = stack[4]; stack[4] = NULL;
	if(qlen == 6){
		temp->area = (stack[5][0] == '[') ? atof(&stack[5][1]) : atof(stack[5]); stack[5] = NULL;
	}
	temp->next = head;
	return temp;
}


voltage_source * insert_voltage_source(voltage_source * head, char *stack[], int qlen){
	if(qlen != 4){
		fprintf(stderr, "[ERR] FILE:%s FUNCTION: %s LINE: %d qlen(%d) != 4\n",__FILE__,__FUNCTION__,__LINE__,qlen);
		return head;
	}
	m2++;
	voltage_source *temp = malloc(sizeof(voltage_source));
	ALLOC_CHECK(temp)
	temp->name = strdup(stack[0]); stack[0] = NULL;
	temp->positive_node = add_node(stack[1]); stack[1] = NULL;
	temp->negative_node = add_node(stack[2]); stack[2] = NULL;
	temp->value = atof(stack[3]); stack[3] = NULL;
	temp->next = head;
	return temp;
}

current_source * insert_current_source(current_source * head, char *stack[], int qlen){
	if(qlen != 4){
		fprintf(stderr, "[ERR] FILE:%s FUNCTION: %s LINE: %d qlen(%d) != 4\n",__FILE__,__FUNCTION__,__LINE__,qlen);
		return head;
	}
	m1++;
	current_source *temp = malloc(sizeof(current_source));
	ALLOC_CHECK(temp)
	temp->name = stack[0]; stack[0] = NULL;
	temp->positive_node = add_node(stack[1]); stack[1] = NULL;
	temp->negative_node = add_node(stack[2]); stack[2] = NULL;
	temp->value = atof(stack[3]); stack[3] = NULL;
	temp->next = head;
	return temp;
}

transistor_mos * insert_transistor_mos(transistor_mos * head, char *stack[], int qlen){
	if(qlen != 8){
		fprintf(stderr, "[ERR] FILE:%s FUNCTION: %s LINE: %d qlen(%d) != 4\n",__FILE__,__FUNCTION__,__LINE__,qlen);
		return head;
	}
	transistor_mos * temp = malloc(sizeof(transistor_mos));
	ALLOC_CHECK(temp)
	temp->name   = stack[0]; 			stack[0] = NULL;
	temp->d_node = add_node(stack[1]); 	stack[1] = NULL;
	temp->s_node = add_node(stack[2]); 	stack[2] = NULL;
	temp->g_node = add_node(stack[3]); 	stack[3] = NULL;
	temp->b_node = add_node(stack[4]); 	stack[4] = NULL;
	temp->model_name = stack[5]; 		stack[5] = NULL;
	temp->L_value = atof(&stack[6][2]); 	stack[6] = NULL;
	temp->W_value = atof(&stack[7][2]); 	stack[7] = NULL;
	temp->next = head;
	return temp;
}

void print_resistor(){

	resistor * temp;
	temp = resistor_list;
	while(temp != NULL){
		printf("pnode: %d, nnode:%d, value:%lf, name:%s\n",temp->positive_node,
			temp->negative_node,temp->value,temp->name);
		temp = temp->next;
	}
}

void print_capacitor(){

	capacitor * temp;
	temp = capacitor_list;
	while(temp != NULL){
		printf("pnode: %d, nnode:%d, value:%lf, name:%s\n",temp->positive_node,
			temp->negative_node,temp->value,temp->name);
		temp = temp->next;
	}
}

void print_coil(){

	coil * temp;
	temp = coil_list;
	while(temp != NULL){
		printf("pnode: %d, nnode:%d, value:%lf, name:%s\n",temp->positive_node,
			temp->negative_node,temp->value,temp->name);
		temp = temp->next;
	}
}

void print_vltg(){

	voltage_source * temp;
	temp = vltg_list;
	while(temp != NULL){
		printf("pnode: %d, nnode:%d, value:%lf, name:%s\n",temp->positive_node,
			temp->negative_node,temp->value,temp->name);
		temp = temp->next;
	}
}

void print_crnt(){

	current_source * temp;
	temp = crnt_list;
	while(temp != NULL){
		printf("pnode: %d, nnode:%d, value:%lf, name:%s\n",temp->positive_node,
			temp->negative_node,temp->value,temp->name);
		temp = temp->next;
	}
}

void print_diode(){

	diode * temp;
	temp = diode_list;
	while(temp != NULL){
		printf("pnode: %d, nnode:%d, model name:%s, name:%s area:%lf\n",temp->positive_node,
			temp->negative_node,temp->model_name,temp->name,temp->area);
		temp = temp->next;
	}
}

void print_transistor_mos(){

	transistor_mos * temp;
	temp = tmos_list;
	while(temp != NULL){
		printf("dnode: %d, gnode:%d, snode:%d, bnode:%d, model name:%s, name:%s, Lvalue:%lf, Wvalue:%lf\n",temp->d_node,
			temp->g_node,temp->s_node,temp->b_node,temp->model_name,temp->name,temp->L_value,temp->W_value);
		temp = temp->next;
	}
}

//model_name??
void print_transistor_bjt(){

	transistor_bjt * temp;
	temp = tbjt_list;
	while(temp != NULL){
		printf("cnode: %d, bnode:%d, enode:%d, model name:%s, name:%s area:%lf\n",temp->c_node,
			temp->b_node,temp->e_node,temp->model_name,temp->name, temp->area);
		temp = temp->next;
	}
}


int insert(char *stack[], int stack_pos, int ignore_line, int line_num){

	printf("ignore_line:%d stack_pos:%d \n",ignore_line,stack_pos );
	int i;
	for(i=0;i<stack_pos;i++)
		printf("%d: %s\t",i,stack[i]);
	printf("\n");
	if(ignore_line == 1){
		fprintf(stderr, "[ERR] FILE:%s FUNCTION: %s LINE: %d %d line is ignored (ignore_line = 1)\n",__FILE__,__FUNCTION__,__LINE__,line_num);
		return 1;
	}
	switch(stack[0][0]){
		case 'r':
		case 'R': resistor_list = insert_resistor(resistor_list,stack,stack_pos); break;
		case 'c':
		case 'C': capacitor_list = insert_capacitor(capacitor_list,stack,stack_pos); break;
		case 'l':
		case 'L': coil_list = insert_coil(coil_list,stack,stack_pos); break;
		case 'm':
		case 'M': tmos_list = insert_transistor_mos(tmos_list,stack,stack_pos); break;
		case 'v':
		case 'V': vltg_list = insert_voltage_source(vltg_list,stack,stack_pos); break;
		case 'i':
		case 'I': crnt_list = insert_current_source(crnt_list,stack,stack_pos); break;
		case 'd':
		case 'D': diode_list = insert_diode(diode_list, stack, stack_pos); break;
		case 'q':
		case 'Q': tbjt_list = insert_bjt(tbjt_list, stack, stack_pos); break;
		case 'K': dc_option_list = insert_dc_option_node(dc_option_list, stack, stack_pos); break;
		default: break;
	}
	/*printf("------------------------------------\n");
	printf("List pointers\n");
	printf("0x%x\n", (unsigned int)resistor_list);
	printf("0x%x\n", (unsigned int)capacitor_list);
	printf("0x%x\n", (unsigned int)coil_list);
	printf("0x%x\n", (unsigned int)tmos_list);
	printf("0x%x\n", (unsigned int)vltg_list);
	printf("0x%x\n", (unsigned int)crnt_list);
	printf("------------------------------------\n");
	*/
	return 1;
}

