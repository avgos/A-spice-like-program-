#ifndef ELEMENT_STRUCTS_H
#define ELEMENT_STRUCTS_H

#include <stdint.h>

typedef struct resistor {
	char *name;
	uint32_t positive_node;
	uint32_t negative_node;
	double value;
	struct resistor *next;
} resistor;

typedef struct capacitor {
	char *name;
	uint32_t positive_node;
	uint32_t negative_node;
	double value;
	struct capacitor *next;
} capacitor;

typedef struct coil {
	char *name;
	uint32_t positive_node;
	uint32_t negative_node;
	double value;
	struct coil *next;
} coil;

typedef struct voltage_source {
	char *name;
	uint32_t positive_node;
	uint32_t negative_node;
	double value;
	int b_vector_pos;
	struct voltage_source *next;
} voltage_source;

typedef struct current_source {
	char *name;
	uint32_t positive_node;
	uint32_t negative_node;
	double value;
	struct current_source *next;
} current_source;

typedef struct diode {
	char *name;	
	uint32_t positive_node;
	uint32_t negative_node;
	char *model_name;
	double area;
	struct diode *next;
} diode;

typedef struct transistor_mos {
	char *name;
	uint32_t d_node;
	uint32_t g_node;
	uint32_t s_node;
	uint32_t b_node;
	char *model_name;
	double L_value;
	double W_value;
	struct transistor_mos *next;
} transistor_mos;

typedef struct transistor_bjt{
	char *name;
	uint32_t c_node;
	uint32_t b_node;
	uint32_t e_node;
	char *model_name;
	double area;
	struct transistor_bjt *next;
	//area
} transistor_bjt;


typedef struct dc_options{
	char * node_name;
	double from_voltage;
	double to_voltage;
	double step;
	struct dc_options *next;
} dc_options;

typedef struct plot_print {
	char * name;
	int index;
	struct plot_print *next;
} plot_print;




dc_options * dc_option_list;
plot_print * plot_print_list;

resistor	* resistor_list;
capacitor * capacitor_list;
coil * coil_list;
voltage_source * vltg_list;
current_source * crnt_list;
diode * diode_list;
transistor_mos * tmos_list;
transistor_bjt * tbjt_list;

unsigned int m2,n,m1,m;
unsigned int analysis_type;

#endif